// <auto-generated>
// Code generated by https://github.com/kubernetes-client/csharp/tree/master/gen/KubernetesGenerator
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace k8s.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    using System.Collections;
    using System.Linq;

    /// <summary>
    /// CertificateSigningRequestCondition describes a condition of a CertificateSigningRequest object
    /// </summary>
    [KubernetesProperty(Description: @"CertificateSigningRequestCondition describes a condition of a CertificateSigningRequest object")]
    public partial class V1CertificateSigningRequestCondition
    {
        /// <summary>
        /// Initializes a new instance of the V1CertificateSigningRequestCondition class.
        /// </summary>
        public V1CertificateSigningRequestCondition()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the V1CertificateSigningRequestCondition class.
        /// </summary>
        /// <param name="status">
        /// status of the condition, one of True, False, Unknown. Approved, Denied, and Failed conditions may not be &quot;False&quot; or &quot;Unknown&quot;.
        /// </param>
        /// <param name="type">
        /// type of the condition. Known conditions are &quot;Approved&quot;, &quot;Denied&quot;, and &quot;Failed&quot;.An &quot;Approved&quot; condition is added via the /approval subresource, indicating the request was approved and should be issued by the signer.A &quot;Denied&quot; condition is added via the /approval subresource, indicating the request was denied and should not be issued by the signer.A &quot;Failed&quot; condition is added via the /status subresource, indicating the signer failed to issue the certificate.Approved and Denied conditions are mutually exclusive. Approved, Denied, and Failed conditions cannot be removed once added.Only one condition of a given type is allowed.
        /// </param>
        /// <param name="lastTransitionTime">
        /// lastTransitionTime is the time the condition last transitioned from one status to another. If unset, when a new condition type is added or an existing condition&apos;s status is changed, the server defaults this to the current time.
        /// </param>
        /// <param name="lastUpdateTime">
        /// lastUpdateTime is the time of the last update to this condition
        /// </param>
        /// <param name="message">
        /// message contains a human readable message with details about the request state
        /// </param>
        /// <param name="reason">
        /// reason indicates a brief reason for the request state
        /// </param>
        public V1CertificateSigningRequestCondition(string status, string type, System.DateTime? lastTransitionTime = null, System.DateTime? lastUpdateTime = null, string message = null, string reason = null)
        {
            LastTransitionTime = lastTransitionTime;
            LastUpdateTime = lastUpdateTime;
            Message = message;
            Reason = reason;
            Status = status;
            Type = type;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        [JsonProperty(PropertyName = "lastTransitionTime")]
        [KubernetesProperty(IsRequired: false, Description: @"lastTransitionTime is the time the condition last transitioned from one status to another. If unset, when a new condition type is added or an existing condition&apos;s status is changed, the server defaults this to the current time.")]
        public System.DateTime? LastTransitionTime { get; set; }

        [JsonProperty(PropertyName = "lastUpdateTime")]
        [KubernetesProperty(IsRequired: false, Description: @"lastUpdateTime is the time of the last update to this condition")]
        public System.DateTime? LastUpdateTime { get; set; }

        [JsonProperty(PropertyName = "message")]
        [KubernetesProperty(IsRequired: false, Description: @"message contains a human readable message with details about the request state")]
        public string Message { get; set; }

        [JsonProperty(PropertyName = "reason")]
        [KubernetesProperty(IsRequired: false, Description: @"reason indicates a brief reason for the request state")]
        public string Reason { get; set; }

        [JsonProperty(PropertyName = "status")]
        [KubernetesProperty(IsRequired: true, Description: @"status of the condition, one of True, False, Unknown. Approved, Denied, and Failed conditions may not be &quot;False&quot; or &quot;Unknown&quot;.")]
        public string Status { get; set; }

        [JsonProperty(PropertyName = "type")]
        [KubernetesProperty(IsRequired: true, Description: @"type of the condition. Known conditions are &quot;Approved&quot;, &quot;Denied&quot;, and &quot;Failed&quot;.An &quot;Approved&quot; condition is added via the /approval subresource, indicating the request was approved and should be issued by the signer.A &quot;Denied&quot; condition is added via the /approval subresource, indicating the request was denied and should not be issued by the signer.A &quot;Failed&quot; condition is added via the /status subresource, indicating the signer failed to issue the certificate.Approved and Denied conditions are mutually exclusive. Approved, Denied, and Failed conditions cannot be removed once added.Only one condition of a given type is allowed.")]
        public string Type { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
        }
    }
}
