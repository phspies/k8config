// <auto-generated>
// Code generated by https://github.com/kubernetes-client/csharp/tree/master/gen/KubernetesGenerator
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace k8s.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    using System.Collections;
    using System.Linq;

    /// <summary>
    /// Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.
    /// </summary>
    [KubernetesProperty(Description: @"Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.")]
    public partial class V1RBDVolumeSource
    {
        /// <summary>
        /// Initializes a new instance of the V1RBDVolumeSource class.
        /// </summary>
        public V1RBDVolumeSource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the V1RBDVolumeSource class.
        /// </summary>
        /// <param name="image">
        /// The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        /// </param>
        /// <param name="monitors">
        /// A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        /// </param>
        /// <param name="fsType">
        /// Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. Implicitly inferred to be &quot;ext4&quot; if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
        /// </param>
        /// <param name="keyring">
        /// Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        /// </param>
        /// <param name="pool">
        /// The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        /// </param>
        /// <param name="readOnlyProperty">
        /// ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        /// </param>
        /// <param name="secretRef">
        /// SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        /// </param>
        /// <param name="user">
        /// The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        /// </param>
        public V1RBDVolumeSource(string image, IList<string> monitors, string fsType = null, string keyring = null, string pool = null, bool? readOnlyProperty = null, V1LocalObjectReference secretRef = null, string user = null)
        {
            FsType = fsType;
            Image = image;
            Keyring = keyring;
            Monitors = monitors;
            Pool = pool;
            ReadOnlyProperty = readOnlyProperty;
            SecretRef = secretRef;
            User = user;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        [JsonProperty(PropertyName = "fsType")]
        [KubernetesProperty(IsRequired: false, Description: @"Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. Implicitly inferred to be &quot;ext4&quot; if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd")]
        public string FsType { get; set; }

        [JsonProperty(PropertyName = "image")]
        [KubernetesProperty(IsRequired: true, Description: @"The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it")]
        public string Image { get; set; }

        [JsonProperty(PropertyName = "keyring")]
        [KubernetesProperty(IsRequired: false, Description: @"Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it")]
        public string Keyring { get; set; }

        [JsonProperty(PropertyName = "monitors")]
        [KubernetesProperty(IsRequired: true, Description: @"A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it")]
        public IList<string> Monitors { get; set; }

        [JsonProperty(PropertyName = "pool")]
        [KubernetesProperty(IsRequired: false, Description: @"The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it")]
        public string Pool { get; set; }

        [JsonProperty(PropertyName = "readOnly")]
        [KubernetesProperty(IsRequired: false, Description: @"ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it")]
        public bool? ReadOnlyProperty { get; set; }

        [JsonProperty(PropertyName = "secretRef")]
        [KubernetesProperty(IsRequired: false, Description: @"SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it")]
        public V1LocalObjectReference SecretRef { get; set; }

        [JsonProperty(PropertyName = "user")]
        [KubernetesProperty(IsRequired: false, Description: @"The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it")]
        public string User { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            SecretRef?.Validate();
        }
    }
}
