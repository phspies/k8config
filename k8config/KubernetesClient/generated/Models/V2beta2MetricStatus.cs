// <auto-generated>
// Code generated by https://github.com/kubernetes-client/csharp/tree/master/gen/KubernetesGenerator
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace k8s.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    using System.Collections;
    using System.Linq;

    /// <summary>
    /// MetricStatus describes the last-read state of a single metric.
    /// </summary>
    [KubernetesProperty(Description: @"MetricStatus describes the last-read state of a single metric.")]
    public partial class V2beta2MetricStatus
    {
        /// <summary>
        /// Initializes a new instance of the V2beta2MetricStatus class.
        /// </summary>
        public V2beta2MetricStatus()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the V2beta2MetricStatus class.
        /// </summary>
        /// <param name="type">
        /// type is the type of metric source.  It will be one of &quot;ContainerResource&quot;, &quot;External&quot;, &quot;Object&quot;, &quot;Pods&quot; or &quot;Resource&quot;, each corresponds to a matching field in the object. Note: &quot;ContainerResource&quot; type is available on when the feature-gate HPAContainerMetrics is enabled
        /// </param>
        /// <param name="containerResource">
        /// container resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing a single container in each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the &quot;pods&quot; source.
        /// </param>
        /// <param name="external">
        /// external refers to a global metric that is not associated with any Kubernetes object. It allows autoscaling based on information coming from components running outside of cluster (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster).
        /// </param>
        /// <param name="objectProperty">
        /// object refers to a metric describing a single kubernetes object (for example, hits-per-second on an Ingress object).
        /// </param>
        /// <param name="pods">
        /// pods refers to a metric describing each pod in the current scale target (for example, transactions-processed-per-second).  The values will be averaged together before being compared to the target value.
        /// </param>
        /// <param name="resource">
        /// resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the &quot;pods&quot; source.
        /// </param>
        public V2beta2MetricStatus(string type, V2beta2ContainerResourceMetricStatus containerResource = null, V2beta2ExternalMetricStatus external = null, V2beta2ObjectMetricStatus objectProperty = null, V2beta2PodsMetricStatus pods = null, V2beta2ResourceMetricStatus resource = null)
        {
            ContainerResource = containerResource;
            External = external;
            ObjectProperty = objectProperty;
            Pods = pods;
            Resource = resource;
            Type = type;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        [JsonProperty(PropertyName = "containerResource")]
        [KubernetesProperty(IsRequired: false, Description: @"container resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing a single container in each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the &quot;pods&quot; source.")]
        public V2beta2ContainerResourceMetricStatus ContainerResource { get; set; }

        [JsonProperty(PropertyName = "external")]
        [KubernetesProperty(IsRequired: false, Description: @"external refers to a global metric that is not associated with any Kubernetes object. It allows autoscaling based on information coming from components running outside of cluster (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster).")]
        public V2beta2ExternalMetricStatus External { get; set; }

        [JsonProperty(PropertyName = "object")]
        [KubernetesProperty(IsRequired: false, Description: @"object refers to a metric describing a single kubernetes object (for example, hits-per-second on an Ingress object).")]
        public V2beta2ObjectMetricStatus ObjectProperty { get; set; }

        [JsonProperty(PropertyName = "pods")]
        [KubernetesProperty(IsRequired: false, Description: @"pods refers to a metric describing each pod in the current scale target (for example, transactions-processed-per-second).  The values will be averaged together before being compared to the target value.")]
        public V2beta2PodsMetricStatus Pods { get; set; }

        [JsonProperty(PropertyName = "resource")]
        [KubernetesProperty(IsRequired: false, Description: @"resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the &quot;pods&quot; source.")]
        public V2beta2ResourceMetricStatus Resource { get; set; }

        [JsonProperty(PropertyName = "type")]
        [KubernetesProperty(IsRequired: true, Description: @"type is the type of metric source.  It will be one of &quot;ContainerResource&quot;, &quot;External&quot;, &quot;Object&quot;, &quot;Pods&quot; or &quot;Resource&quot;, each corresponds to a matching field in the object. Note: &quot;ContainerResource&quot; type is available on when the feature-gate HPAContainerMetrics is enabled")]
        public string Type { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            ContainerResource?.Validate();
            External?.Validate();
            ObjectProperty?.Validate();
            Pods?.Validate();
            Resource?.Validate();
        }
    }
}
