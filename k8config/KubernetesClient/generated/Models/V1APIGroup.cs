// <auto-generated>
// Code generated by https://github.com/kubernetes-client/csharp/tree/master/gen/KubernetesGenerator
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace k8s.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    using System.Collections;
    using System.Linq;

    /// <summary>
    /// APIGroup contains the name, the supported versions, and the preferred version of a group.
    /// </summary>
    [KubernetesProperty(Description: @"APIGroup contains the name, the supported versions, and the preferred version of a group.")]
    public partial class V1APIGroup
    {
        /// <summary>
        /// Initializes a new instance of the V1APIGroup class.
        /// </summary>
        public V1APIGroup()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the V1APIGroup class.
        /// </summary>
        /// <param name="name">
        /// name is the name of the group.
        /// </param>
        /// <param name="versions">
        /// versions are the versions supported in this group.
        /// </param>
        /// <param name="apiVersion">
        /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        /// </param>
        /// <param name="kind">
        /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        /// </param>
        /// <param name="preferredVersion">
        /// preferredVersion is the version preferred by the API server, which probably is the storage version.
        /// </param>
        /// <param name="serverAddressByClientCIDRs">
        /// a map of client CIDR to server address that is serving this group. This is to help clients reach servers in the most network-efficient way possible. Clients can use the appropriate server address as per the CIDR that they match. In case of multiple matches, clients should use the longest matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP.
        /// </param>
        public V1APIGroup(string name, IList<V1GroupVersionForDiscovery> versions, string apiVersion = null, string kind = null, V1GroupVersionForDiscovery preferredVersion = null, IList<V1ServerAddressByClientCIDR> serverAddressByClientCIDRs = null)
        {
            ApiVersion = apiVersion;
            Kind = kind;
            Name = name;
            PreferredVersion = preferredVersion;
            ServerAddressByClientCIDRs = serverAddressByClientCIDRs;
            Versions = versions;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        [JsonProperty(PropertyName = "apiVersion")]
        [KubernetesProperty(IsRequired: false, Description: @"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources")]
        public string ApiVersion { get; set; }

        [JsonProperty(PropertyName = "kind")]
        [KubernetesProperty(IsRequired: false, Description: @"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds")]
        public string Kind { get; set; }

        [JsonProperty(PropertyName = "name")]
        [KubernetesProperty(IsRequired: true, Description: @"name is the name of the group.")]
        public string Name { get; set; }

        [JsonProperty(PropertyName = "preferredVersion")]
        [KubernetesProperty(IsRequired: false, Description: @"preferredVersion is the version preferred by the API server, which probably is the storage version.")]
        public V1GroupVersionForDiscovery PreferredVersion { get; set; }

        [JsonProperty(PropertyName = "serverAddressByClientCIDRs")]
        [KubernetesProperty(IsRequired: false, Description: @"a map of client CIDR to server address that is serving this group. This is to help clients reach servers in the most network-efficient way possible. Clients can use the appropriate server address as per the CIDR that they match. In case of multiple matches, clients should use the longest matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP.")]
        public IList<V1ServerAddressByClientCIDR> ServerAddressByClientCIDRs { get; set; }

        [JsonProperty(PropertyName = "versions")]
        [KubernetesProperty(IsRequired: true, Description: @"versions are the versions supported in this group.")]
        public IList<V1GroupVersionForDiscovery> Versions { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            PreferredVersion?.Validate();
            foreach(var obj in ServerAddressByClientCIDRs)
            {
                obj.Validate();
            }
            foreach(var obj in Versions)
            {
                obj.Validate();
            }
        }
    }
}
