// <auto-generated>
// Code generated by https://github.com/kubernetes-client/csharp/tree/master/gen/KubernetesGenerator
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace k8s.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    using System.Collections;
    using System.Linq;

    /// <summary>
    /// NodeSystemInfo is a set of ids/uuids to uniquely identify the node.
    /// </summary>
    [KubernetesProperty(Description: @"NodeSystemInfo is a set of ids/uuids to uniquely identify the node.")]
    public partial class V1NodeSystemInfo
    {
        /// <summary>
        /// Initializes a new instance of the V1NodeSystemInfo class.
        /// </summary>
        public V1NodeSystemInfo()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the V1NodeSystemInfo class.
        /// </summary>
        /// <param name="architecture">
        /// The Architecture reported by the node
        /// </param>
        /// <param name="bootID">
        /// Boot ID reported by the node.
        /// </param>
        /// <param name="containerRuntimeVersion">
        /// ContainerRuntime Version reported by the node through runtime remote API (e.g. docker://1.5.0).
        /// </param>
        /// <param name="kernelVersion">
        /// Kernel Version reported by the node from &apos;uname -r&apos; (e.g. 3.16.0-0.bpo.4-amd64).
        /// </param>
        /// <param name="kubeProxyVersion">
        /// KubeProxy Version reported by the node.
        /// </param>
        /// <param name="kubeletVersion">
        /// Kubelet Version reported by the node.
        /// </param>
        /// <param name="machineID">
        /// MachineID reported by the node. For unique machine identification in the cluster this field is preferred. Learn more from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html
        /// </param>
        /// <param name="operatingSystem">
        /// The Operating System reported by the node
        /// </param>
        /// <param name="osImage">
        /// OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).
        /// </param>
        /// <param name="systemUUID">
        /// SystemUUID reported by the node. For unique machine identification MachineID is preferred. This field is specific to Red Hat hosts https://access.redhat.com/documentation/en-us/red_hat_subscription_management/1/html/rhsm/uuid
        /// </param>
        public V1NodeSystemInfo(string architecture, string bootID, string containerRuntimeVersion, string kernelVersion, string kubeProxyVersion, string kubeletVersion, string machineID, string operatingSystem, string osImage, string systemUUID)
        {
            Architecture = architecture;
            BootID = bootID;
            ContainerRuntimeVersion = containerRuntimeVersion;
            KernelVersion = kernelVersion;
            KubeProxyVersion = kubeProxyVersion;
            KubeletVersion = kubeletVersion;
            MachineID = machineID;
            OperatingSystem = operatingSystem;
            OsImage = osImage;
            SystemUUID = systemUUID;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        [JsonProperty(PropertyName = "architecture")]
        [KubernetesProperty(IsRequired: true, Description: @"The Architecture reported by the node")]
        public string Architecture { get; set; }

        [JsonProperty(PropertyName = "bootID")]
        [KubernetesProperty(IsRequired: true, Description: @"Boot ID reported by the node.")]
        public string BootID { get; set; }

        [JsonProperty(PropertyName = "containerRuntimeVersion")]
        [KubernetesProperty(IsRequired: true, Description: @"ContainerRuntime Version reported by the node through runtime remote API (e.g. docker://1.5.0).")]
        public string ContainerRuntimeVersion { get; set; }

        [JsonProperty(PropertyName = "kernelVersion")]
        [KubernetesProperty(IsRequired: true, Description: @"Kernel Version reported by the node from &apos;uname -r&apos; (e.g. 3.16.0-0.bpo.4-amd64).")]
        public string KernelVersion { get; set; }

        [JsonProperty(PropertyName = "kubeProxyVersion")]
        [KubernetesProperty(IsRequired: true, Description: @"KubeProxy Version reported by the node.")]
        public string KubeProxyVersion { get; set; }

        [JsonProperty(PropertyName = "kubeletVersion")]
        [KubernetesProperty(IsRequired: true, Description: @"Kubelet Version reported by the node.")]
        public string KubeletVersion { get; set; }

        [JsonProperty(PropertyName = "machineID")]
        [KubernetesProperty(IsRequired: true, Description: @"MachineID reported by the node. For unique machine identification in the cluster this field is preferred. Learn more from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html")]
        public string MachineID { get; set; }

        [JsonProperty(PropertyName = "operatingSystem")]
        [KubernetesProperty(IsRequired: true, Description: @"The Operating System reported by the node")]
        public string OperatingSystem { get; set; }

        [JsonProperty(PropertyName = "osImage")]
        [KubernetesProperty(IsRequired: true, Description: @"OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).")]
        public string OsImage { get; set; }

        [JsonProperty(PropertyName = "systemUUID")]
        [KubernetesProperty(IsRequired: true, Description: @"SystemUUID reported by the node. For unique machine identification MachineID is preferred. This field is specific to Red Hat hosts https://access.redhat.com/documentation/en-us/red_hat_subscription_management/1/html/rhsm/uuid")]
        public string SystemUUID { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
        }
    }
}
