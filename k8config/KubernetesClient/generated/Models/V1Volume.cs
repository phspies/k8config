// <auto-generated>
// Code generated by https://github.com/kubernetes-client/csharp/tree/master/gen/KubernetesGenerator
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace k8s.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    using System.Collections;
    using System.Linq;

    /// <summary>
    /// Volume represents a named volume in a pod that may be accessed by any container in the pod.
    /// </summary>
    [KubernetesProperty(Description: @"Volume represents a named volume in a pod that may be accessed by any container in the pod.")]
    public partial class V1Volume
    {
        /// <summary>
        /// Initializes a new instance of the V1Volume class.
        /// </summary>
        public V1Volume()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the V1Volume class.
        /// </summary>
        /// <param name="name">
        /// Volume&apos;s name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        /// </param>
        /// <param name="awsElasticBlockStore">
        /// AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet&apos;s host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        /// </param>
        /// <param name="azureDisk">
        /// AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
        /// </param>
        /// <param name="azureFile">
        /// AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
        /// </param>
        /// <param name="cephfs">
        /// CephFS represents a Ceph FS mount on the host that shares a pod&apos;s lifetime
        /// </param>
        /// <param name="cinder">
        /// Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        /// </param>
        /// <param name="configMap">
        /// ConfigMap represents a configMap that should populate this volume
        /// </param>
        /// <param name="csi">
        /// CSI (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
        /// </param>
        /// <param name="downwardAPI">
        /// DownwardAPI represents downward API about the pod that should populate this volume
        /// </param>
        /// <param name="emptyDir">
        /// EmptyDir represents a temporary directory that shares a pod&apos;s lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
        /// </param>
        /// <param name="ephemeral">
        /// Ephemeral represents a volume that is handled by a cluster storage driver. The volume&apos;s lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed.Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity   tracking are needed,c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through   a PersistentVolumeClaim (see EphemeralVolumeSource for more   information on the connection between this volume type   and PersistentVolumeClaim).Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod.Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information.A pod can use both types of ephemeral volumes and persistent volumes at the same time.This is a beta feature and only available when the GenericEphemeralVolume feature gate is enabled.
        /// </param>
        /// <param name="fc">
        /// FC represents a Fibre Channel resource that is attached to a kubelet&apos;s host machine and then exposed to the pod.
        /// </param>
        /// <param name="flexVolume">
        /// FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
        /// </param>
        /// <param name="flocker">
        /// Flocker represents a Flocker volume attached to a kubelet&apos;s host machine. This depends on the Flocker control service being running
        /// </param>
        /// <param name="gcePersistentDisk">
        /// GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet&apos;s host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        /// </param>
        /// <param name="gitRepo">
        /// GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod&apos;s container.
        /// </param>
        /// <param name="glusterfs">
        /// Glusterfs represents a Glusterfs mount on the host that shares a pod&apos;s lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
        /// </param>
        /// <param name="hostPath">
        /// HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
        /// </param>
        /// <param name="iscsi">
        /// ISCSI represents an ISCSI Disk resource that is attached to a kubelet&apos;s host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
        /// </param>
        /// <param name="nfs">
        /// NFS represents an NFS mount on the host that shares a pod&apos;s lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        /// </param>
        /// <param name="persistentVolumeClaim">
        /// PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
        /// </param>
        /// <param name="photonPersistentDisk">
        /// PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
        /// </param>
        /// <param name="portworxVolume">
        /// PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
        /// </param>
        /// <param name="projected">
        /// Items for all in one resources secrets, configmaps, and downward API
        /// </param>
        /// <param name="quobyte">
        /// Quobyte represents a Quobyte mount on the host that shares a pod&apos;s lifetime
        /// </param>
        /// <param name="rbd">
        /// RBD represents a Rados Block Device mount on the host that shares a pod&apos;s lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
        /// </param>
        /// <param name="scaleIO">
        /// ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
        /// </param>
        /// <param name="secret">
        /// Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
        /// </param>
        /// <param name="storageos">
        /// StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
        /// </param>
        /// <param name="vsphereVolume">
        /// VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
        /// </param>
        public V1Volume(string name, V1AWSElasticBlockStoreVolumeSource awsElasticBlockStore = null, V1AzureDiskVolumeSource azureDisk = null, V1AzureFileVolumeSource azureFile = null, V1CephFSVolumeSource cephfs = null, V1CinderVolumeSource cinder = null, V1ConfigMapVolumeSource configMap = null, V1CSIVolumeSource csi = null, V1DownwardAPIVolumeSource downwardAPI = null, V1EmptyDirVolumeSource emptyDir = null, V1EphemeralVolumeSource ephemeral = null, V1FCVolumeSource fc = null, V1FlexVolumeSource flexVolume = null, V1FlockerVolumeSource flocker = null, V1GCEPersistentDiskVolumeSource gcePersistentDisk = null, V1GitRepoVolumeSource gitRepo = null, V1GlusterfsVolumeSource glusterfs = null, V1HostPathVolumeSource hostPath = null, V1ISCSIVolumeSource iscsi = null, V1NFSVolumeSource nfs = null, V1PersistentVolumeClaimVolumeSource persistentVolumeClaim = null, V1PhotonPersistentDiskVolumeSource photonPersistentDisk = null, V1PortworxVolumeSource portworxVolume = null, V1ProjectedVolumeSource projected = null, V1QuobyteVolumeSource quobyte = null, V1RBDVolumeSource rbd = null, V1ScaleIOVolumeSource scaleIO = null, V1SecretVolumeSource secret = null, V1StorageOSVolumeSource storageos = null, V1VsphereVirtualDiskVolumeSource vsphereVolume = null)
        {
            AwsElasticBlockStore = awsElasticBlockStore;
            AzureDisk = azureDisk;
            AzureFile = azureFile;
            Cephfs = cephfs;
            Cinder = cinder;
            ConfigMap = configMap;
            Csi = csi;
            DownwardAPI = downwardAPI;
            EmptyDir = emptyDir;
            Ephemeral = ephemeral;
            Fc = fc;
            FlexVolume = flexVolume;
            Flocker = flocker;
            GcePersistentDisk = gcePersistentDisk;
            GitRepo = gitRepo;
            Glusterfs = glusterfs;
            HostPath = hostPath;
            Iscsi = iscsi;
            Name = name;
            Nfs = nfs;
            PersistentVolumeClaim = persistentVolumeClaim;
            PhotonPersistentDisk = photonPersistentDisk;
            PortworxVolume = portworxVolume;
            Projected = projected;
            Quobyte = quobyte;
            Rbd = rbd;
            ScaleIO = scaleIO;
            Secret = secret;
            Storageos = storageos;
            VsphereVolume = vsphereVolume;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        [JsonProperty(PropertyName = "awsElasticBlockStore")]
        [KubernetesProperty(IsRequired: false, Description: @"AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet&apos;s host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore")]
        public V1AWSElasticBlockStoreVolumeSource AwsElasticBlockStore { get; set; }

        [JsonProperty(PropertyName = "azureDisk")]
        [KubernetesProperty(IsRequired: false, Description: @"AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.")]
        public V1AzureDiskVolumeSource AzureDisk { get; set; }

        [JsonProperty(PropertyName = "azureFile")]
        [KubernetesProperty(IsRequired: false, Description: @"AzureFile represents an Azure File Service mount on the host and bind mount to the pod.")]
        public V1AzureFileVolumeSource AzureFile { get; set; }

        [JsonProperty(PropertyName = "cephfs")]
        [KubernetesProperty(IsRequired: false, Description: @"CephFS represents a Ceph FS mount on the host that shares a pod&apos;s lifetime")]
        public V1CephFSVolumeSource Cephfs { get; set; }

        [JsonProperty(PropertyName = "cinder")]
        [KubernetesProperty(IsRequired: false, Description: @"Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md")]
        public V1CinderVolumeSource Cinder { get; set; }

        [JsonProperty(PropertyName = "configMap")]
        [KubernetesProperty(IsRequired: false, Description: @"ConfigMap represents a configMap that should populate this volume")]
        public V1ConfigMapVolumeSource ConfigMap { get; set; }

        [JsonProperty(PropertyName = "csi")]
        [KubernetesProperty(IsRequired: false, Description: @"CSI (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).")]
        public V1CSIVolumeSource Csi { get; set; }

        [JsonProperty(PropertyName = "downwardAPI")]
        [KubernetesProperty(IsRequired: false, Description: @"DownwardAPI represents downward API about the pod that should populate this volume")]
        public V1DownwardAPIVolumeSource DownwardAPI { get; set; }

        [JsonProperty(PropertyName = "emptyDir")]
        [KubernetesProperty(IsRequired: false, Description: @"EmptyDir represents a temporary directory that shares a pod&apos;s lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir")]
        public V1EmptyDirVolumeSource EmptyDir { get; set; }

        [JsonProperty(PropertyName = "ephemeral")]
        [KubernetesProperty(IsRequired: false, Description: @"Ephemeral represents a volume that is handled by a cluster storage driver. The volume&apos;s lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed.Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity   tracking are needed,c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through   a PersistentVolumeClaim (see EphemeralVolumeSource for more   information on the connection between this volume type   and PersistentVolumeClaim).Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod.Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information.A pod can use both types of ephemeral volumes and persistent volumes at the same time.This is a beta feature and only available when the GenericEphemeralVolume feature gate is enabled.")]
        public V1EphemeralVolumeSource Ephemeral { get; set; }

        [JsonProperty(PropertyName = "fc")]
        [KubernetesProperty(IsRequired: false, Description: @"FC represents a Fibre Channel resource that is attached to a kubelet&apos;s host machine and then exposed to the pod.")]
        public V1FCVolumeSource Fc { get; set; }

        [JsonProperty(PropertyName = "flexVolume")]
        [KubernetesProperty(IsRequired: false, Description: @"FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.")]
        public V1FlexVolumeSource FlexVolume { get; set; }

        [JsonProperty(PropertyName = "flocker")]
        [KubernetesProperty(IsRequired: false, Description: @"Flocker represents a Flocker volume attached to a kubelet&apos;s host machine. This depends on the Flocker control service being running")]
        public V1FlockerVolumeSource Flocker { get; set; }

        [JsonProperty(PropertyName = "gcePersistentDisk")]
        [KubernetesProperty(IsRequired: false, Description: @"GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet&apos;s host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk")]
        public V1GCEPersistentDiskVolumeSource GcePersistentDisk { get; set; }

        [JsonProperty(PropertyName = "gitRepo")]
        [KubernetesProperty(IsRequired: false, Description: @"GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod&apos;s container.")]
        public V1GitRepoVolumeSource GitRepo { get; set; }

        [JsonProperty(PropertyName = "glusterfs")]
        [KubernetesProperty(IsRequired: false, Description: @"Glusterfs represents a Glusterfs mount on the host that shares a pod&apos;s lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md")]
        public V1GlusterfsVolumeSource Glusterfs { get; set; }

        [JsonProperty(PropertyName = "hostPath")]
        [KubernetesProperty(IsRequired: false, Description: @"HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath")]
        public V1HostPathVolumeSource HostPath { get; set; }

        [JsonProperty(PropertyName = "iscsi")]
        [KubernetesProperty(IsRequired: false, Description: @"ISCSI represents an ISCSI Disk resource that is attached to a kubelet&apos;s host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md")]
        public V1ISCSIVolumeSource Iscsi { get; set; }

        [JsonProperty(PropertyName = "name")]
        [KubernetesProperty(IsRequired: true, Description: @"Volume&apos;s name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names")]
        public string Name { get; set; }

        [JsonProperty(PropertyName = "nfs")]
        [KubernetesProperty(IsRequired: false, Description: @"NFS represents an NFS mount on the host that shares a pod&apos;s lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs")]
        public V1NFSVolumeSource Nfs { get; set; }

        [JsonProperty(PropertyName = "persistentVolumeClaim")]
        [KubernetesProperty(IsRequired: false, Description: @"PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims")]
        public V1PersistentVolumeClaimVolumeSource PersistentVolumeClaim { get; set; }

        [JsonProperty(PropertyName = "photonPersistentDisk")]
        [KubernetesProperty(IsRequired: false, Description: @"PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine")]
        public V1PhotonPersistentDiskVolumeSource PhotonPersistentDisk { get; set; }

        [JsonProperty(PropertyName = "portworxVolume")]
        [KubernetesProperty(IsRequired: false, Description: @"PortworxVolume represents a portworx volume attached and mounted on kubelets host machine")]
        public V1PortworxVolumeSource PortworxVolume { get; set; }

        [JsonProperty(PropertyName = "projected")]
        [KubernetesProperty(IsRequired: false, Description: @"Items for all in one resources secrets, configmaps, and downward API")]
        public V1ProjectedVolumeSource Projected { get; set; }

        [JsonProperty(PropertyName = "quobyte")]
        [KubernetesProperty(IsRequired: false, Description: @"Quobyte represents a Quobyte mount on the host that shares a pod&apos;s lifetime")]
        public V1QuobyteVolumeSource Quobyte { get; set; }

        [JsonProperty(PropertyName = "rbd")]
        [KubernetesProperty(IsRequired: false, Description: @"RBD represents a Rados Block Device mount on the host that shares a pod&apos;s lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md")]
        public V1RBDVolumeSource Rbd { get; set; }

        [JsonProperty(PropertyName = "scaleIO")]
        [KubernetesProperty(IsRequired: false, Description: @"ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.")]
        public V1ScaleIOVolumeSource ScaleIO { get; set; }

        [JsonProperty(PropertyName = "secret")]
        [KubernetesProperty(IsRequired: false, Description: @"Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret")]
        public V1SecretVolumeSource Secret { get; set; }

        [JsonProperty(PropertyName = "storageos")]
        [KubernetesProperty(IsRequired: false, Description: @"StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.")]
        public V1StorageOSVolumeSource Storageos { get; set; }

        [JsonProperty(PropertyName = "vsphereVolume")]
        [KubernetesProperty(IsRequired: false, Description: @"VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine")]
        public V1VsphereVirtualDiskVolumeSource VsphereVolume { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            AwsElasticBlockStore?.Validate();
            AzureDisk?.Validate();
            AzureFile?.Validate();
            Cephfs?.Validate();
            Cinder?.Validate();
            ConfigMap?.Validate();
            Csi?.Validate();
            DownwardAPI?.Validate();
            EmptyDir?.Validate();
            Ephemeral?.Validate();
            Fc?.Validate();
            FlexVolume?.Validate();
            Flocker?.Validate();
            GcePersistentDisk?.Validate();
            GitRepo?.Validate();
            Glusterfs?.Validate();
            HostPath?.Validate();
            Iscsi?.Validate();
            Nfs?.Validate();
            PersistentVolumeClaim?.Validate();
            PhotonPersistentDisk?.Validate();
            PortworxVolume?.Validate();
            Projected?.Validate();
            Quobyte?.Validate();
            Rbd?.Validate();
            ScaleIO?.Validate();
            Secret?.Validate();
            Storageos?.Validate();
            VsphereVolume?.Validate();
        }
    }
}
