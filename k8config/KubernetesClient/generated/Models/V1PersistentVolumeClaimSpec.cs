// <auto-generated>
// Code generated by https://github.com/kubernetes-client/csharp/tree/master/gen/KubernetesGenerator
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace k8s.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    using System.Collections;
    using System.Linq;

    /// <summary>
    /// PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes
    /// </summary>
    [KubernetesProperty(Description: @"PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes")]
    public partial class V1PersistentVolumeClaimSpec
    {
        /// <summary>
        /// Initializes a new instance of the V1PersistentVolumeClaimSpec class.
        /// </summary>
        public V1PersistentVolumeClaimSpec()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the V1PersistentVolumeClaimSpec class.
        /// </summary>
        /// <param name="accessModes">
        /// AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
        /// </param>
        /// <param name="dataSource">
        /// This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.
        /// </param>
        /// <param name="dataSourceRef">
        /// Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef  allows any non-core object, as well as PersistentVolumeClaim objects.* While DataSource ignores disallowed values (dropping them), DataSourceRef  preserves all values, and generates an error if a disallowed value is  specified.(Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
        /// </param>
        /// <param name="resources">
        /// Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
        /// </param>
        /// <param name="selector">
        /// A label query over volumes to consider for binding.
        /// </param>
        /// <param name="storageClassName">
        /// Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
        /// </param>
        /// <param name="volumeMode">
        /// volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
        /// </param>
        /// <param name="volumeName">
        /// VolumeName is the binding reference to the PersistentVolume backing this claim.
        /// </param>
        public V1PersistentVolumeClaimSpec(IList<string> accessModes = null, V1TypedLocalObjectReference dataSource = null, V1TypedLocalObjectReference dataSourceRef = null, V1ResourceRequirements resources = null, V1LabelSelector selector = null, string storageClassName = null, string volumeMode = null, string volumeName = null)
        {
            AccessModes = accessModes;
            DataSource = dataSource;
            DataSourceRef = dataSourceRef;
            Resources = resources;
            Selector = selector;
            StorageClassName = storageClassName;
            VolumeMode = volumeMode;
            VolumeName = volumeName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        [JsonProperty(PropertyName = "accessModes")]
        [KubernetesProperty(IsRequired: false, Description: @"AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1")]
        public IList<string> AccessModes { get; set; }

        [JsonProperty(PropertyName = "dataSource")]
        [KubernetesProperty(IsRequired: false, Description: @"This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.")]
        public V1TypedLocalObjectReference DataSource { get; set; }

        [JsonProperty(PropertyName = "dataSourceRef")]
        [KubernetesProperty(IsRequired: false, Description: @"Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef  allows any non-core object, as well as PersistentVolumeClaim objects.* While DataSource ignores disallowed values (dropping them), DataSourceRef  preserves all values, and generates an error if a disallowed value is  specified.(Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.")]
        public V1TypedLocalObjectReference DataSourceRef { get; set; }

        [JsonProperty(PropertyName = "resources")]
        [KubernetesProperty(IsRequired: false, Description: @"Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources")]
        public V1ResourceRequirements Resources { get; set; }

        [JsonProperty(PropertyName = "selector")]
        [KubernetesProperty(IsRequired: false, Description: @"A label query over volumes to consider for binding.")]
        public V1LabelSelector Selector { get; set; }

        [JsonProperty(PropertyName = "storageClassName")]
        [KubernetesProperty(IsRequired: false, Description: @"Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1")]
        public string StorageClassName { get; set; }

        [JsonProperty(PropertyName = "volumeMode")]
        [KubernetesProperty(IsRequired: false, Description: @"volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.")]
        public string VolumeMode { get; set; }

        [JsonProperty(PropertyName = "volumeName")]
        [KubernetesProperty(IsRequired: false, Description: @"VolumeName is the binding reference to the PersistentVolume backing this claim.")]
        public string VolumeName { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            DataSource?.Validate();
            DataSourceRef?.Validate();
            Resources?.Validate();
            Selector?.Validate();
        }
    }
}
