// <auto-generated>
// Code generated by https://github.com/kubernetes-client/csharp/tree/master/gen/KubernetesGenerator
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace k8s.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    using System.Collections;
    using System.Linq;

    /// <summary>
    /// current status of a horizontal pod autoscaler
    /// </summary>
    [KubernetesProperty(Description: @"current status of a horizontal pod autoscaler")]
    public partial class V1HorizontalPodAutoscalerStatus
    {
        /// <summary>
        /// Initializes a new instance of the V1HorizontalPodAutoscalerStatus class.
        /// </summary>
        public V1HorizontalPodAutoscalerStatus()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the V1HorizontalPodAutoscalerStatus class.
        /// </summary>
        /// <param name="currentReplicas">
        /// current number of replicas of pods managed by this autoscaler.
        /// </param>
        /// <param name="desiredReplicas">
        /// desired number of replicas of pods managed by this autoscaler.
        /// </param>
        /// <param name="currentCPUUtilizationPercentage">
        /// current average CPU utilization over all pods, represented as a percentage of requested CPU, e.g. 70 means that an average pod is using now 70% of its requested CPU.
        /// </param>
        /// <param name="lastScaleTime">
        /// last time the HorizontalPodAutoscaler scaled the number of pods; used by the autoscaler to control how often the number of pods is changed.
        /// </param>
        /// <param name="observedGeneration">
        /// most recent generation observed by this autoscaler.
        /// </param>
        public V1HorizontalPodAutoscalerStatus(int currentReplicas, int desiredReplicas, int? currentCPUUtilizationPercentage = null, System.DateTime? lastScaleTime = null, long? observedGeneration = null)
        {
            CurrentCPUUtilizationPercentage = currentCPUUtilizationPercentage;
            CurrentReplicas = currentReplicas;
            DesiredReplicas = desiredReplicas;
            LastScaleTime = lastScaleTime;
            ObservedGeneration = observedGeneration;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        [JsonProperty(PropertyName = "currentCPUUtilizationPercentage")]
        [KubernetesProperty(IsRequired: false, Description: @"current average CPU utilization over all pods, represented as a percentage of requested CPU, e.g. 70 means that an average pod is using now 70% of its requested CPU.")]
        public int? CurrentCPUUtilizationPercentage { get; set; }

        [JsonProperty(PropertyName = "currentReplicas")]
        [KubernetesProperty(IsRequired: true, Description: @"current number of replicas of pods managed by this autoscaler.")]
        public int CurrentReplicas { get; set; }

        [JsonProperty(PropertyName = "desiredReplicas")]
        [KubernetesProperty(IsRequired: true, Description: @"desired number of replicas of pods managed by this autoscaler.")]
        public int DesiredReplicas { get; set; }

        [JsonProperty(PropertyName = "lastScaleTime")]
        [KubernetesProperty(IsRequired: false, Description: @"last time the HorizontalPodAutoscaler scaled the number of pods; used by the autoscaler to control how often the number of pods is changed.")]
        public System.DateTime? LastScaleTime { get; set; }

        [JsonProperty(PropertyName = "observedGeneration")]
        [KubernetesProperty(IsRequired: false, Description: @"most recent generation observed by this autoscaler.")]
        public long? ObservedGeneration { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
        }
    }
}
