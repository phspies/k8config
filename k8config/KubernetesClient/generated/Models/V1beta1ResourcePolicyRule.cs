// <auto-generated>
// Code generated by https://github.com/kubernetes-client/csharp/tree/master/gen/KubernetesGenerator
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace k8s.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    using System.Collections;
    using System.Linq;

    /// <summary>
    /// ResourcePolicyRule is a predicate that matches some resource requests, testing the request&apos;s verb and the target resource. A ResourcePolicyRule matches a resource request if and only if: (a) at least one member of verbs matches the request, (b) at least one member of apiGroups matches the request, (c) at least one member of resources matches the request, and (d) least one member of namespaces matches the request.
    /// </summary>
    [KubernetesProperty(Description: @"ResourcePolicyRule is a predicate that matches some resource requests, testing the request&apos;s verb and the target resource. A ResourcePolicyRule matches a resource request if and only if: (a) at least one member of verbs matches the request, (b) at least one member of apiGroups matches the request, (c) at least one member of resources matches the request, and (d) least one member of namespaces matches the request.")]
    public partial class V1beta1ResourcePolicyRule
    {
        /// <summary>
        /// Initializes a new instance of the V1beta1ResourcePolicyRule class.
        /// </summary>
        public V1beta1ResourcePolicyRule()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the V1beta1ResourcePolicyRule class.
        /// </summary>
        /// <param name="apiGroups">
        /// `apiGroups` is a list of matching API groups and may not be empty. &quot;*&quot; matches all API groups and, if present, must be the only entry. Required.
        /// </param>
        /// <param name="resources">
        /// `resources` is a list of matching resources (i.e., lowercase and plural) with, if desired, subresource.  For example, [ &quot;services&quot;, &quot;nodes/status&quot; ].  This list may not be empty. &quot;*&quot; matches all resources and, if present, must be the only entry. Required.
        /// </param>
        /// <param name="verbs">
        /// `verbs` is a list of matching verbs and may not be empty. &quot;*&quot; matches all verbs and, if present, must be the only entry. Required.
        /// </param>
        /// <param name="clusterScope">
        /// `clusterScope` indicates whether to match requests that do not specify a namespace (which happens either because the resource is not namespaced or the request targets all namespaces). If this field is omitted or false then the `namespaces` field must contain a non-empty list.
        /// </param>
        /// <param name="namespaces">
        /// `namespaces` is a list of target namespaces that restricts matches.  A request that specifies a target namespace matches only if either (a) this list contains that target namespace or (b) this list contains &quot;*&quot;.  Note that &quot;*&quot; matches any specified namespace but does not match a request that _does not specify_ a namespace (see the `clusterScope` field for that). This list may be empty, but only if `clusterScope` is true.
        /// </param>
        public V1beta1ResourcePolicyRule(IList<string> apiGroups, IList<string> resources, IList<string> verbs, bool? clusterScope = null, IList<string> namespaces = null)
        {
            ApiGroups = apiGroups;
            ClusterScope = clusterScope;
            Namespaces = namespaces;
            Resources = resources;
            Verbs = verbs;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        [JsonProperty(PropertyName = "apiGroups")]
        [KubernetesProperty(IsRequired: true, Description: @"`apiGroups` is a list of matching API groups and may not be empty. &quot;*&quot; matches all API groups and, if present, must be the only entry. Required.")]
        public IList<string> ApiGroups { get; set; }

        [JsonProperty(PropertyName = "clusterScope")]
        [KubernetesProperty(IsRequired: false, Description: @"`clusterScope` indicates whether to match requests that do not specify a namespace (which happens either because the resource is not namespaced or the request targets all namespaces). If this field is omitted or false then the `namespaces` field must contain a non-empty list.")]
        public bool? ClusterScope { get; set; }

        [JsonProperty(PropertyName = "namespaces")]
        [KubernetesProperty(IsRequired: false, Description: @"`namespaces` is a list of target namespaces that restricts matches.  A request that specifies a target namespace matches only if either (a) this list contains that target namespace or (b) this list contains &quot;*&quot;.  Note that &quot;*&quot; matches any specified namespace but does not match a request that _does not specify_ a namespace (see the `clusterScope` field for that). This list may be empty, but only if `clusterScope` is true.")]
        public IList<string> Namespaces { get; set; }

        [JsonProperty(PropertyName = "resources")]
        [KubernetesProperty(IsRequired: true, Description: @"`resources` is a list of matching resources (i.e., lowercase and plural) with, if desired, subresource.  For example, [ &quot;services&quot;, &quot;nodes/status&quot; ].  This list may not be empty. &quot;*&quot; matches all resources and, if present, must be the only entry. Required.")]
        public IList<string> Resources { get; set; }

        [JsonProperty(PropertyName = "verbs")]
        [KubernetesProperty(IsRequired: true, Description: @"`verbs` is a list of matching verbs and may not be empty. &quot;*&quot; matches all verbs and, if present, must be the only entry. Required.")]
        public IList<string> Verbs { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
        }
    }
}
