// <auto-generated>
// Code generated by https://github.com/kubernetes-client/csharp/tree/master/gen/KubernetesGenerator
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace k8s.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    using System.Collections;
    using System.Linq;

    /// <summary>
    /// Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.
    /// </summary>
    [KubernetesProperty(Description: @"Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.")]
    public partial class V1FCVolumeSource
    {
        /// <summary>
        /// Initializes a new instance of the V1FCVolumeSource class.
        /// </summary>
        public V1FCVolumeSource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the V1FCVolumeSource class.
        /// </summary>
        /// <param name="fsType">
        /// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. Implicitly inferred to be &quot;ext4&quot; if unspecified.
        /// </param>
        /// <param name="lun">
        /// Optional: FC target lun number
        /// </param>
        /// <param name="readOnlyProperty">
        /// Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        /// </param>
        /// <param name="targetWWNs">
        /// Optional: FC target worldwide names (WWNs)
        /// </param>
        /// <param name="wwids">
        /// Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
        /// </param>
        public V1FCVolumeSource(string fsType = null, int? lun = null, bool? readOnlyProperty = null, IList<string> targetWWNs = null, IList<string> wwids = null)
        {
            FsType = fsType;
            Lun = lun;
            ReadOnlyProperty = readOnlyProperty;
            TargetWWNs = targetWWNs;
            Wwids = wwids;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        [JsonProperty(PropertyName = "fsType")]
        [KubernetesProperty(IsRequired: false, Description: @"Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. Implicitly inferred to be &quot;ext4&quot; if unspecified.")]
        public string FsType { get; set; }

        [JsonProperty(PropertyName = "lun")]
        [KubernetesProperty(IsRequired: false, Description: @"Optional: FC target lun number")]
        public int? Lun { get; set; }

        [JsonProperty(PropertyName = "readOnly")]
        [KubernetesProperty(IsRequired: false, Description: @"Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.")]
        public bool? ReadOnlyProperty { get; set; }

        [JsonProperty(PropertyName = "targetWWNs")]
        [KubernetesProperty(IsRequired: false, Description: @"Optional: FC target worldwide names (WWNs)")]
        public IList<string> TargetWWNs { get; set; }

        [JsonProperty(PropertyName = "wwids")]
        [KubernetesProperty(IsRequired: false, Description: @"Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.")]
        public IList<string> Wwids { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
        }
    }
}
