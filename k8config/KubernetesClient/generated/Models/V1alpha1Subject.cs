// <auto-generated>
// Code generated by https://github.com/kubernetes-client/csharp/tree/master/gen/KubernetesGenerator
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace k8s.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    using System.Collections;
    using System.Linq;

    /// <summary>
    /// Subject contains a reference to the object or user identities a role binding applies to.  This can either hold a direct API object reference, or a value for non-objects such as user and group names.
    /// </summary>
    [KubernetesProperty(Description: @"Subject contains a reference to the object or user identities a role binding applies to.  This can either hold a direct API object reference, or a value for non-objects such as user and group names.")]
    public partial class V1alpha1Subject
    {
        /// <summary>
        /// Initializes a new instance of the V1alpha1Subject class.
        /// </summary>
        public V1alpha1Subject()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the V1alpha1Subject class.
        /// </summary>
        /// <param name="kind">
        /// Kind of object being referenced. Values defined by this API group are &quot;User&quot;, &quot;Group&quot;, and &quot;ServiceAccount&quot;. If the Authorizer does not recognized the kind value, the Authorizer should report an error.
        /// </param>
        /// <param name="name">
        /// Name of the object being referenced.
        /// </param>
        /// <param name="apiVersion">
        /// APIVersion holds the API group and version of the referenced subject. Defaults to &quot;v1&quot; for ServiceAccount subjects. Defaults to &quot;rbac.authorization.k8s.io/v1alpha1&quot; for User and Group subjects.
        /// </param>
        /// <param name="namespaceProperty">
        /// Namespace of the referenced object.  If the object kind is non-namespace, such as &quot;User&quot; or &quot;Group&quot;, and this value is not empty the Authorizer should report an error.
        /// </param>
        public V1alpha1Subject(string kind, string name, string apiVersion = null, string namespaceProperty = null)
        {
            ApiVersion = apiVersion;
            Kind = kind;
            Name = name;
            NamespaceProperty = namespaceProperty;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        [JsonProperty(PropertyName = "apiVersion")]
        [KubernetesProperty(IsRequired: false, Description: @"APIVersion holds the API group and version of the referenced subject. Defaults to &quot;v1&quot; for ServiceAccount subjects. Defaults to &quot;rbac.authorization.k8s.io/v1alpha1&quot; for User and Group subjects.")]
        public string ApiVersion { get; set; }

        [JsonProperty(PropertyName = "kind")]
        [KubernetesProperty(IsRequired: true, Description: @"Kind of object being referenced. Values defined by this API group are &quot;User&quot;, &quot;Group&quot;, and &quot;ServiceAccount&quot;. If the Authorizer does not recognized the kind value, the Authorizer should report an error.")]
        public string Kind { get; set; }

        [JsonProperty(PropertyName = "name")]
        [KubernetesProperty(IsRequired: true, Description: @"Name of the object being referenced.")]
        public string Name { get; set; }

        [JsonProperty(PropertyName = "namespace")]
        [KubernetesProperty(IsRequired: false, Description: @"Namespace of the referenced object.  If the object kind is non-namespace, such as &quot;User&quot; or &quot;Group&quot;, and this value is not empty the Authorizer should report an error.")]
        public string NamespaceProperty { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
        }
    }
}
