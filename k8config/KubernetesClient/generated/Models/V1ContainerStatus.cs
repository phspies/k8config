// <auto-generated>
// Code generated by https://github.com/kubernetes-client/csharp/tree/master/gen/KubernetesGenerator
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace k8s.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    using System.Collections;
    using System.Linq;

    /// <summary>
    /// ContainerStatus contains details for the current status of this container.
    /// </summary>
    [KubernetesProperty(Description: @"ContainerStatus contains details for the current status of this container.")]
    public partial class V1ContainerStatus
    {
        /// <summary>
        /// Initializes a new instance of the V1ContainerStatus class.
        /// </summary>
        public V1ContainerStatus()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the V1ContainerStatus class.
        /// </summary>
        /// <param name="image">
        /// The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images
        /// </param>
        /// <param name="imageID">
        /// ImageID of the container&apos;s image.
        /// </param>
        /// <param name="name">
        /// This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.
        /// </param>
        /// <param name="ready">
        /// Specifies whether the container has passed its readiness probe.
        /// </param>
        /// <param name="restartCount">
        /// The number of times the container has been restarted, currently based on the number of dead containers that have not yet been removed. Note that this is calculated from dead containers. But those containers are subject to garbage collection. This value will get capped at 5 by GC.
        /// </param>
        /// <param name="containerID">
        /// Container&apos;s ID in the format &apos;docker://&lt;container_id&gt;&apos;.
        /// </param>
        /// <param name="lastState">
        /// Details about the container&apos;s last termination condition.
        /// </param>
        /// <param name="started">
        /// Specifies whether the container has passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. Is always true when no startupProbe is defined.
        /// </param>
        /// <param name="state">
        /// Details about the container&apos;s current condition.
        /// </param>
        public V1ContainerStatus(string image, string imageID, string name, bool ready, int restartCount, string containerID = null, V1ContainerState lastState = null, bool? started = null, V1ContainerState state = null)
        {
            ContainerID = containerID;
            Image = image;
            ImageID = imageID;
            LastState = lastState;
            Name = name;
            Ready = ready;
            RestartCount = restartCount;
            Started = started;
            State = state;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        [JsonProperty(PropertyName = "containerID")]
        [KubernetesProperty(IsRequired: false, Description: @"Container&apos;s ID in the format &apos;docker://&lt;container_id&gt;&apos;.")]
        public string ContainerID { get; set; }

        [JsonProperty(PropertyName = "image")]
        [KubernetesProperty(IsRequired: true, Description: @"The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images")]
        public string Image { get; set; }

        [JsonProperty(PropertyName = "imageID")]
        [KubernetesProperty(IsRequired: true, Description: @"ImageID of the container&apos;s image.")]
        public string ImageID { get; set; }

        [JsonProperty(PropertyName = "lastState")]
        [KubernetesProperty(IsRequired: false, Description: @"Details about the container&apos;s last termination condition.")]
        public V1ContainerState LastState { get; set; }

        [JsonProperty(PropertyName = "name")]
        [KubernetesProperty(IsRequired: true, Description: @"This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.")]
        public string Name { get; set; }

        [JsonProperty(PropertyName = "ready")]
        [KubernetesProperty(IsRequired: true, Description: @"Specifies whether the container has passed its readiness probe.")]
        public bool Ready { get; set; }

        [JsonProperty(PropertyName = "restartCount")]
        [KubernetesProperty(IsRequired: true, Description: @"The number of times the container has been restarted, currently based on the number of dead containers that have not yet been removed. Note that this is calculated from dead containers. But those containers are subject to garbage collection. This value will get capped at 5 by GC.")]
        public int RestartCount { get; set; }

        [JsonProperty(PropertyName = "started")]
        [KubernetesProperty(IsRequired: false, Description: @"Specifies whether the container has passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. Is always true when no startupProbe is defined.")]
        public bool? Started { get; set; }

        [JsonProperty(PropertyName = "state")]
        [KubernetesProperty(IsRequired: false, Description: @"Details about the container&apos;s current condition.")]
        public V1ContainerState State { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            LastState?.Validate();
            State?.Validate();
        }
    }
}
