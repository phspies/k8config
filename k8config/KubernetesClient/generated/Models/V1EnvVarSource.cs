// <auto-generated>
// Code generated by https://github.com/kubernetes-client/csharp/tree/master/gen/KubernetesGenerator
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace k8s.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    using System.Collections;
    using System.Linq;

    /// <summary>
    /// EnvVarSource represents a source for the value of an EnvVar.
    /// </summary>
    [KubernetesProperty(Description: @"EnvVarSource represents a source for the value of an EnvVar.")]
    public partial class V1EnvVarSource
    {
        /// <summary>
        /// Initializes a new instance of the V1EnvVarSource class.
        /// </summary>
        public V1EnvVarSource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the V1EnvVarSource class.
        /// </summary>
        /// <param name="configMapKeyRef">
        /// Selects a key of a ConfigMap.
        /// </param>
        /// <param name="fieldRef">
        /// Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels[&apos;&lt;KEY&gt;&apos;]`, `metadata.annotations[&apos;&lt;KEY&gt;&apos;]`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
        /// </param>
        /// <param name="resourceFieldRef">
        /// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        /// </param>
        /// <param name="secretKeyRef">
        /// Selects a key of a secret in the pod&apos;s namespace
        /// </param>
        public V1EnvVarSource(V1ConfigMapKeySelector configMapKeyRef = null, V1ObjectFieldSelector fieldRef = null, V1ResourceFieldSelector resourceFieldRef = null, V1SecretKeySelector secretKeyRef = null)
        {
            ConfigMapKeyRef = configMapKeyRef;
            FieldRef = fieldRef;
            ResourceFieldRef = resourceFieldRef;
            SecretKeyRef = secretKeyRef;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        [JsonProperty(PropertyName = "configMapKeyRef")]
        [KubernetesProperty(IsRequired: false, Description: @"Selects a key of a ConfigMap.")]
        public V1ConfigMapKeySelector ConfigMapKeyRef { get; set; }

        [JsonProperty(PropertyName = "fieldRef")]
        [KubernetesProperty(IsRequired: false, Description: @"Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels[&apos;&lt;KEY&gt;&apos;]`, `metadata.annotations[&apos;&lt;KEY&gt;&apos;]`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.")]
        public V1ObjectFieldSelector FieldRef { get; set; }

        [JsonProperty(PropertyName = "resourceFieldRef")]
        [KubernetesProperty(IsRequired: false, Description: @"Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.")]
        public V1ResourceFieldSelector ResourceFieldRef { get; set; }

        [JsonProperty(PropertyName = "secretKeyRef")]
        [KubernetesProperty(IsRequired: false, Description: @"Selects a key of a secret in the pod&apos;s namespace")]
        public V1SecretKeySelector SecretKeyRef { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            ConfigMapKeyRef?.Validate();
            FieldRef?.Validate();
            ResourceFieldRef?.Validate();
            SecretKeyRef?.Validate();
        }
    }
}
