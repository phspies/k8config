// <auto-generated>
// Code generated by https://github.com/kubernetes-client/csharp/tree/master/gen/KubernetesGenerator
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace k8s.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    using System.Collections;
    using System.Linq;

    /// <summary>
    /// ContainerStateTerminated is a terminated state of a container.
    /// </summary>
    [KubernetesProperty(Description: @"ContainerStateTerminated is a terminated state of a container.")]
    public partial class V1ContainerStateTerminated
    {
        /// <summary>
        /// Initializes a new instance of the V1ContainerStateTerminated class.
        /// </summary>
        public V1ContainerStateTerminated()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the V1ContainerStateTerminated class.
        /// </summary>
        /// <param name="exitCode">
        /// Exit status from the last termination of the container
        /// </param>
        /// <param name="containerID">
        /// Container&apos;s ID in the format &apos;docker://&lt;container_id&gt;&apos;
        /// </param>
        /// <param name="finishedAt">
        /// Time at which the container last terminated
        /// </param>
        /// <param name="message">
        /// Message regarding the last termination of the container
        /// </param>
        /// <param name="reason">
        /// (brief) reason from the last termination of the container
        /// </param>
        /// <param name="signal">
        /// Signal from the last termination of the container
        /// </param>
        /// <param name="startedAt">
        /// Time at which previous execution of the container started
        /// </param>
        public V1ContainerStateTerminated(int exitCode, string containerID = null, System.DateTime? finishedAt = null, string message = null, string reason = null, int? signal = null, System.DateTime? startedAt = null)
        {
            ContainerID = containerID;
            ExitCode = exitCode;
            FinishedAt = finishedAt;
            Message = message;
            Reason = reason;
            Signal = signal;
            StartedAt = startedAt;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        [JsonProperty(PropertyName = "containerID")]
        [KubernetesProperty(IsRequired: false, Description: @"Container&apos;s ID in the format &apos;docker://&lt;container_id&gt;&apos;")]
        public string ContainerID { get; set; }

        [JsonProperty(PropertyName = "exitCode")]
        [KubernetesProperty(IsRequired: true, Description: @"Exit status from the last termination of the container")]
        public int ExitCode { get; set; }

        [JsonProperty(PropertyName = "finishedAt")]
        [KubernetesProperty(IsRequired: false, Description: @"Time at which the container last terminated")]
        public System.DateTime? FinishedAt { get; set; }

        [JsonProperty(PropertyName = "message")]
        [KubernetesProperty(IsRequired: false, Description: @"Message regarding the last termination of the container")]
        public string Message { get; set; }

        [JsonProperty(PropertyName = "reason")]
        [KubernetesProperty(IsRequired: false, Description: @"(brief) reason from the last termination of the container")]
        public string Reason { get; set; }

        [JsonProperty(PropertyName = "signal")]
        [KubernetesProperty(IsRequired: false, Description: @"Signal from the last termination of the container")]
        public int? Signal { get; set; }

        [JsonProperty(PropertyName = "startedAt")]
        [KubernetesProperty(IsRequired: false, Description: @"Time at which previous execution of the container started")]
        public System.DateTime? StartedAt { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
        }
    }
}
