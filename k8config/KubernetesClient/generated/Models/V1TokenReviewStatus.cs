// <auto-generated>
// Code generated by https://github.com/kubernetes-client/csharp/tree/master/gen/KubernetesGenerator
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace k8s.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    using System.Collections;
    using System.Linq;

    /// <summary>
    /// TokenReviewStatus is the result of the token authentication request.
    /// </summary>
    [KubernetesProperty(Description: @"TokenReviewStatus is the result of the token authentication request.")]
    public partial class V1TokenReviewStatus
    {
        /// <summary>
        /// Initializes a new instance of the V1TokenReviewStatus class.
        /// </summary>
        public V1TokenReviewStatus()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the V1TokenReviewStatus class.
        /// </summary>
        /// <param name="audiences">
        /// Audiences are audience identifiers chosen by the authenticator that are compatible with both the TokenReview and token. An identifier is any identifier in the intersection of the TokenReviewSpec audiences and the token&apos;s audiences. A client of the TokenReview API that sets the spec.audiences field should validate that a compatible audience identifier is returned in the status.audiences field to ensure that the TokenReview server is audience aware. If a TokenReview returns an empty status.audience field where status.authenticated is &quot;true&quot;, the token is valid against the audience of the Kubernetes API server.
        /// </param>
        /// <param name="authenticated">
        /// Authenticated indicates that the token was associated with a known user.
        /// </param>
        /// <param name="error">
        /// Error indicates that the token couldn&apos;t be checked
        /// </param>
        /// <param name="user">
        /// User is the UserInfo associated with the provided token.
        /// </param>
        public V1TokenReviewStatus(IList<string> audiences = null, bool? authenticated = null, string error = null, V1UserInfo user = null)
        {
            Audiences = audiences;
            Authenticated = authenticated;
            Error = error;
            User = user;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        [JsonProperty(PropertyName = "audiences")]
        [KubernetesProperty(IsRequired: false, Description: @"Audiences are audience identifiers chosen by the authenticator that are compatible with both the TokenReview and token. An identifier is any identifier in the intersection of the TokenReviewSpec audiences and the token&apos;s audiences. A client of the TokenReview API that sets the spec.audiences field should validate that a compatible audience identifier is returned in the status.audiences field to ensure that the TokenReview server is audience aware. If a TokenReview returns an empty status.audience field where status.authenticated is &quot;true&quot;, the token is valid against the audience of the Kubernetes API server.")]
        public IList<string> Audiences { get; set; }

        [JsonProperty(PropertyName = "authenticated")]
        [KubernetesProperty(IsRequired: false, Description: @"Authenticated indicates that the token was associated with a known user.")]
        public bool? Authenticated { get; set; }

        [JsonProperty(PropertyName = "error")]
        [KubernetesProperty(IsRequired: false, Description: @"Error indicates that the token couldn&apos;t be checked")]
        public string Error { get; set; }

        [JsonProperty(PropertyName = "user")]
        [KubernetesProperty(IsRequired: false, Description: @"User is the UserInfo associated with the provided token.")]
        public V1UserInfo User { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            User?.Validate();
        }
    }
}
