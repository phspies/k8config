// <auto-generated>
// Code generated by https://github.com/kubernetes-client/csharp/tree/master/gen/KubernetesGenerator
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace k8s.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    using System.Collections;
    using System.Linq;

    /// <summary>
    /// Represents storage that is managed by an external CSI volume driver (Beta feature)
    /// </summary>
    [KubernetesProperty(Description: @"Represents storage that is managed by an external CSI volume driver (Beta feature)")]
    public partial class V1CSIPersistentVolumeSource
    {
        /// <summary>
        /// Initializes a new instance of the V1CSIPersistentVolumeSource class.
        /// </summary>
        public V1CSIPersistentVolumeSource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the V1CSIPersistentVolumeSource class.
        /// </summary>
        /// <param name="driver">
        /// Driver is the name of the driver to use for this volume. Required.
        /// </param>
        /// <param name="volumeHandle">
        /// VolumeHandle is the unique volume name returned by the CSI volume plugin’s CreateVolume to refer to the volume on all subsequent calls. Required.
        /// </param>
        /// <param name="controllerExpandSecretRef">
        /// ControllerExpandSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerExpandVolume call. This is an alpha field and requires enabling ExpandCSIVolumes feature gate. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
        /// </param>
        /// <param name="controllerPublishSecretRef">
        /// ControllerPublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerPublishVolume and ControllerUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
        /// </param>
        /// <param name="fsType">
        /// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;.
        /// </param>
        /// <param name="nodePublishSecretRef">
        /// NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
        /// </param>
        /// <param name="nodeStageSecretRef">
        /// NodeStageSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodeStageVolume and NodeStageVolume and NodeUnstageVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
        /// </param>
        /// <param name="readOnlyProperty">
        /// Optional: The value to pass to ControllerPublishVolumeRequest. Defaults to false (read/write).
        /// </param>
        /// <param name="volumeAttributes">
        /// Attributes of the volume to publish.
        /// </param>
        public V1CSIPersistentVolumeSource(string driver, string volumeHandle, V1SecretReference controllerExpandSecretRef = null, V1SecretReference controllerPublishSecretRef = null, string fsType = null, V1SecretReference nodePublishSecretRef = null, V1SecretReference nodeStageSecretRef = null, bool? readOnlyProperty = null, IDictionary<string, string> volumeAttributes = null)
        {
            ControllerExpandSecretRef = controllerExpandSecretRef;
            ControllerPublishSecretRef = controllerPublishSecretRef;
            Driver = driver;
            FsType = fsType;
            NodePublishSecretRef = nodePublishSecretRef;
            NodeStageSecretRef = nodeStageSecretRef;
            ReadOnlyProperty = readOnlyProperty;
            VolumeAttributes = volumeAttributes;
            VolumeHandle = volumeHandle;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        [JsonProperty(PropertyName = "controllerExpandSecretRef")]
        [KubernetesProperty(IsRequired: false, Description: @"ControllerExpandSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerExpandVolume call. This is an alpha field and requires enabling ExpandCSIVolumes feature gate. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.")]
        public V1SecretReference ControllerExpandSecretRef { get; set; }

        [JsonProperty(PropertyName = "controllerPublishSecretRef")]
        [KubernetesProperty(IsRequired: false, Description: @"ControllerPublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerPublishVolume and ControllerUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.")]
        public V1SecretReference ControllerPublishSecretRef { get; set; }

        [JsonProperty(PropertyName = "driver")]
        [KubernetesProperty(IsRequired: true, Description: @"Driver is the name of the driver to use for this volume. Required.")]
        public string Driver { get; set; }

        [JsonProperty(PropertyName = "fsType")]
        [KubernetesProperty(IsRequired: false, Description: @"Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;.")]
        public string FsType { get; set; }

        [JsonProperty(PropertyName = "nodePublishSecretRef")]
        [KubernetesProperty(IsRequired: false, Description: @"NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.")]
        public V1SecretReference NodePublishSecretRef { get; set; }

        [JsonProperty(PropertyName = "nodeStageSecretRef")]
        [KubernetesProperty(IsRequired: false, Description: @"NodeStageSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodeStageVolume and NodeStageVolume and NodeUnstageVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.")]
        public V1SecretReference NodeStageSecretRef { get; set; }

        [JsonProperty(PropertyName = "readOnly")]
        [KubernetesProperty(IsRequired: false, Description: @"Optional: The value to pass to ControllerPublishVolumeRequest. Defaults to false (read/write).")]
        public bool? ReadOnlyProperty { get; set; }

        [JsonProperty(PropertyName = "volumeAttributes")]
        [KubernetesProperty(IsRequired: false, Description: @"Attributes of the volume to publish.")]
        public IDictionary<string, string> VolumeAttributes { get; set; }

        [JsonProperty(PropertyName = "volumeHandle")]
        [KubernetesProperty(IsRequired: true, Description: @"VolumeHandle is the unique volume name returned by the CSI volume plugin’s CreateVolume to refer to the volume on all subsequent calls. Required.")]
        public string VolumeHandle { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            ControllerExpandSecretRef?.Validate();
            ControllerPublishSecretRef?.Validate();
            NodePublishSecretRef?.Validate();
            NodeStageSecretRef?.Validate();
        }
    }
}
